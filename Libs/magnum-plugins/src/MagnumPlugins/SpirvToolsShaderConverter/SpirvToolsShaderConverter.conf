provides=SpirvToSpirvAssemblyShaderConverter
provides=SpirvAssemblyToSpirvShaderConverter
provides=SpirvShaderConverter
provides=SpirvAssemblyShaderConverter

# [config]
[configuration]

# Assembler-related options

# If enabled, numeric IDs in the binary will have the same values as in the
# assembly text. Non-numeric IDs are allocated by filling in the gaps, starting
# with 1 and going up. Implicitly enabled when validating a SPIR-V assembly.
preserveNumericIds=false

# Disassembler-related options

# ANSI-colored disassembly output, useful when printing directly to a terminal
color=false
# Indent the disassembly output
indent=true
# Show byte offset for each disassembled instruction
byteOffset=false
# Output the header as leading comments in the disassembly
header=true
# Use friendly names in the disassembly instead of raw IDs where possible
friendlyNames=true

# Optimizer options, in addition to the preset passed in setOptimizationLevel()

# Run the validator before optimization / after each optimization pass. The
# latter is available since SPIRV-Tools 2019.3, ignored on earlier versions.
validateBeforeOptimization=true
validateAfterEachOptimization=false
# Print resource utilitzation of each pass to the output
optimizerTimeReport=false
# Preserve bindings / specialization constans during optimization. Available
# since SPIRV-Tools 2019.4, ignored on earlier versions.
preserveBindings=false
preserveSpecializationConstants=false

# Validation options

# Maximum allowed number of struct members, struct nesting depth, local
# variables, global variables, branches allowed in switch statements, arguments
# per function, Control Flow nesting depth, indices to use for Access Chain
# instruction and the ID bound. All those default to the Universal Limits
# described in the SPIR-V spec.
maxStructMembers=16383
maxStructDepth=255
maxLocalVariables=524287
maxGlobalVariables=65535
maxSwitchBranches=16383
maxFunctionArgs=255
maxControlFlowNestingDepth=1023
maxAccessChainIndices=255
# Used when optimizing even if validateBeforeOptimization is disabled
maxIdBound=4194303

# Allow allocating an object of a pointer type and returning a pointer value
# from a function in logical addressing mode
relaxLogicalPointer=false

# Enable VK_KHR_relaxed_block_layout when checking standard uniform, storage
# buffer, and push constant layouts. This is the default when targeting Vulkan
# 1.1 or later.
relaxBlockLayout=false

# Enable VK_KHR_uniform_buffer_standard_layout when checking standard uniform
# buffer layouts. Available since SPIRV-Tools 2019.3, ignored on earlier
# versions.
uniformBufferStandardLayout=false

# Enable VK_EXT_scalar_block_layout when checking standard uniform, storage
# buffer, and push constant layouts. Scalar layout rules are more permissive
# than relaxed block layout so in effect this will override the
# relax-block-layout option.
scalarBlockLayout=false

# Skip checking standard uniform/storage buffer layout. Overrides any
# relax-block-layout or scalar-block-layout option.
skipBlockLayout=false

# Allow store from one struct type to a different type with compatible layout
# and members.
relaxStructStore=false

# Allows code patterns that are intended to be fixed by SPIR-V Optimizer's
# legalization passes. Available since SPIRV-Tools 2019.3, ignored on earlier
# versions.
beforeHlslLegalization=false
# [config]
